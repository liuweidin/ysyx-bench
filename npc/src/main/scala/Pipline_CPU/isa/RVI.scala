package Pipline_CPU.isa
import Pipline_CPU._
import Pipline_CPU.frontend._
import Pipline_CPU.backend._
import chisel3._
import chisel3.util._
object RVI extends Paramete{

  def ADDI = BitPat("b????????????_?????_000_?????_0010011")
  def SLLI = BitPat("b000000?_?????_?????_001_?????_0010011")
  def ORI = BitPat("b????????????_?????_110_?????_0010011")
  def LD = BitPat("b???????_?????_?????_011_?????_0000011")
  def SD = BitPat("b???????_?????_?????_011_?????_0100011")
  def LW = BitPat("b???????_?????_?????_010_?????_0000011")
  def SLTIU = BitPat("b???????_?????_?????_011_?????_0010011")
  def ADDIW = BitPat("b???????_?????_?????_000_?????_0011011")
  def SRAI = BitPat("b010000?_?????_?????_101_?????_0010011")
  def LBU = BitPat("b???????_?????_?????_100_?????_0000011")
  def XORI = BitPat("b???????_?????_?????_100_?????_0010011")
  def ANDI = BitPat("b???????_?????_?????_111_?????_0010011")
  def SB = BitPat("b??????? ????? ????? 000 ????? 01000 11")
  def SRLI = BitPat("b000000?_?????_?????_101_?????_0010011")
  def BGE = BitPat("b???????_?????_?????_101_?????_1100011")
  def SW = BitPat("b???????_?????_?????_010_?????_0100011")
  def LH = BitPat("b???????_?????_?????_001_?????_0000011")
  def LHU = BitPat("b???????_?????_?????_101_?????_0000011")
  def SLLIW = BitPat("b000000?_?????_?????_001_?????_0011011")
  def SRAIW = BitPat("b010000?_?????_?????_101_?????_0011011")
  def MUL = BitPat("b0000001_?????_?????_000_?????_0110011")
  def SRLIW = BitPat("b000000?_?????_?????_101_?????_0011011")
  def XOR = BitPat("b0000000_?????_?????_100_?????_0110011")
  def REMUW = BitPat("b0000001_?????_?????_111_?????_0111011")
  def SLL = BitPat("b0000000_?????_?????_001_?????_0110011")
  def LB = BitPat("b???????_?????_?????_000_?????_0000011")
  def SLTI = BitPat("b???????_?????_?????_010_?????_0010011")
  def LWU = BitPat("b???????_?????_?????_110_?????_0000011")




  val table = Array(
    ADDI -> List(InstrType.InstrI, FUType.alu, ALUOPType.add, RD.write),
    SLLI -> List(InstrType.InstrI, FUType.shift, ALUOPType.sll, RD.write),
    ORI -> List(InstrType.InstrI,FUType.alu,ALUOPType.or,RD.write),
    LD -> List(InstrType.InstrI,FUType.mem,ALUOPType.ld,RD.write),
    LW -> List(InstrType.InstrI,FUType.mem,ALUOPType.lw,RD.write),
    SLTIU -> List(InstrType.InstrI,FUType.compar,ALUOPType.sltiu,RD.write),
    ADDIW -> List(InstrType.InstrI,FUType.alu,ALUOPType.addiw,RD.write),
    SRAI -> List(InstrType.InstrI, FUType.shift, ALUOPType.srai, RD.write),
    LBU -> List(InstrType.InstrI, FUType.mem, ALUOPType.lbu, RD.write),
    LB -> List(InstrType.InstrI, FUType.mem, ALUOPType.lb, RD.write),
    XORI -> List(InstrType.InstrI,FUType.alu,ALUOPType.xor,RD.write),
    ANDI -> List(InstrType.InstrI,FUType.alu,ALUOPType.and,RD.write),
    SRLI -> List(InstrType.InstrI,FUType.shift,ALUOPType.srli,RD.write),
    LH -> List(InstrType.InstrI, FUType.mem, ALUOPType.lh, RD.write),
    LHU -> List(InstrType.InstrI, FUType.mem, ALUOPType.lhu, RD.write),
    SLLIW -> List(InstrType.InstrI, FUType.shift, ALUOPType.slliw, RD.write),
    SRAIW -> List(InstrType.InstrI, FUType.shift, ALUOPType.sraiw, RD.write),
    SRLIW ->List(InstrType.InstrI,FUType.shift,ALUOPType.srliw,RD.write),
    SLTI -> List(InstrType.InstrI, FUType.compar, ALUOPType.slt, RD.write),
    LWU -> List(InstrType.InstrI, FUType.mem, ALUOPType.lwu, RD.write),
  )
}
